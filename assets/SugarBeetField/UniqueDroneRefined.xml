<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// --- REFINED MODEL - RTWBS Relaxed Reception ---
// --- Constants ---
const int DRONE_MAX_POWER = 100;
const int LOW_POWER_THRESHOLD = 10;
const int CRUISING_POWER_COST = 2; // Power consumed per time unit while cruising/waiting
const int SPRAYING_POWER_COST = 4; // Extra power cost for one spray action
const int MISSION_CYCLES = 5; // Drone must complete this many spray cycles to finish

// RTWBS Timing Constants - REFINED MODEL
// SEND bounds remain STRICT (same as abstract)
const int EMERGENCY_ALERT_SEND_BOUND = 1; // Must send emergency alert within 1 time unit (STRICT)
const int FARM_ENTRY_SEND_BOUND = 2; // Must notify farm entry within 2 time units (STRICT)
const int FARM_EXIT_SEND_BOUND = 1; // Must notify farm exit within 1 time unit (STRICT)

// RECEIVE bounds are RELAXED (longer than abstract)
const int EMERGENCY_RESPONSE_RECEIVE_BOUND = 45; // Can receive response up to 45 time units (RELAXED from 30)
const int FARM_ENTRY_RECEIVE_BOUND = 8; // Farm system can receive within 8 time units (RELAXED from 5)
const int FARM_EXIT_RECEIVE_BOUND = 6; // Farm system can receive within 6 time units (RELAXED from 3)

// Additional refined model parameters for delays
const int GROUND_CONTROL_PROCESSING_DELAY = 8; // Extended processing time
const int FARM_SYSTEM_BUFFER_DELAY = 3; // Network buffering delay
const int RADIO_INTERFERENCE_DELAY = 5; // Communication interference

// --- System State Variables ---
bool near_organic_farm = false;
bool isSpraying = false;
bool pest_emergency = false; // Detected emergency situation
bool emergency_response_received = false;
bool farm_entry_acknowledged = false;

// Internal system delays and buffers
bool ground_control_busy = false;
bool farm_system_overloaded = false;
int communication_interference_level = 0;

// Communication channels (same as abstract)
chan emergency_alert;
chan emergency_response;
chan farm_entry_notification;
chan farm_entry_ack;
chan farm_exit_notification;
chan farm_exit_ack;

// Internal processing channels for refined model
chan internal_emergency_processing;
chan internal_farm_processing;

// Drone's internal state
int power = DRONE_MAX_POWER;
int sprayCycles = 0;</declaration>
	<template>
		<name>Drone</name>
		<declaration>clock t; // General operation timer
clock x; // Power consumption timer
clock emergency_timer; // Timer for emergency alert sending
clock farm_entry_timer; // Timer for farm entry notification
clock farm_exit_timer; // Timer for farm exit notification
clock response_wait_timer; // Extended waiting for responses</declaration>
		<location id="id0" x="-906" y="-349">
			<name x="-916" y="-383">Idle</name>
			<committed/>
		</location>
		<location id="id1" x="-588" y="-348">
			<name x="-678" y="-309">Cruising</name>
			<label kind="invariant" x="-646" y="-339">x &lt;= 1</label>
		</location>
		<location id="id2" x="-178" y="-350">
			<name x="-153" y="-349">Spraying</name>
			<label kind="invariant" x="-188" y="-332">t &lt;= 2</label>
		</location>
		<location id="id3" x="120" y="-158">
			<name x="86" y="-141">Error_LowPower</name>
		</location>
		<location id="id4" x="-927" y="-412">
			<name x="-965" y="-446">Finished</name>
		</location>
		<location id="id5" x="-192" y="-634">
			<name x="-125" y="-672">CruisingNearFarm</name>
			<label kind="invariant" x="-300" y="-625">x &lt;= 1 &amp;&amp; farm_entry_timer &lt;= FARM_ENTRY_SEND_BOUND</label>
		</location>
		<location id="id6" x="-500" y="-150">
			<name x="-550" y="-140">EmergencyDetected</name>
			<label kind="invariant" x="-610" y="-130">emergency_timer &lt;= EMERGENCY_ALERT_SEND_BOUND</label>
		</location>
		<location id="id7" x="-300" y="-50">
			<name x="-380" y="-40">WaitingEmergencyResponse</name>
			<label kind="invariant" x="-480" y="-25">response_wait_timer &lt;= EMERGENCY_RESPONSE_RECEIVE_BOUND</label>
		</location>
		<location id="id8" x="-400" y="-634">
			<name x="-450" y="-650">FarmEntryNotified</name>
		</location>
		<location id="id9" x="-50" y="-634">
			<name x="-25" y="-650">ExitingFarm</name>
			<label kind="invariant" x="25" y="-640">farm_exit_timer &lt;= FARM_EXIT_SEND_BOUND</label>
		</location>
		<location id="id10" x="-300" y="50">
			<name x="-350" y="65">EmergencyTimeout</name>
		</location>
		<location id="id11" x="-600" y="-634">
			<name x="-650" y="-650">FarmEntryWaiting</name>
		</location>
		<init ref="id0"/>
		
		<!-- Transitions from Idle -->
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-890" y="-345">power = DRONE_MAX_POWER,
sprayCycles = 0,
t = 0, x = 0,
emergency_timer = 0,
farm_entry_timer = 0,
farm_exit_timer = 0,
response_wait_timer = 0</label>
		</transition>
		
		<!-- Normal operations: Cruising transitions -->
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-562" y="-71">power &lt;= LOW_POWER_THRESHOLD</label>
			<nail x="-580" y="-86"/>
			<nail x="94" y="-92"/>
		</transition>
		
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-901" y="-399">sprayCycles &gt;= MISSION_CYCLES</label>
			<nail x="-726" y="-415"/>
		</transition>
		
		<!-- Emergency detection during cruising -->
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="guard" x="-550" y="-250">t &gt;= 3</label>
			<label kind="assignment" x="-550" y="-230">pest_emergency = true,
emergency_timer = 0</label>
		</transition>
		
		<!-- Emergency alert sending (STRICT TIMING - same as abstract) -->
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-450" y="-120">emergency_timer &lt;= EMERGENCY_ALERT_SEND_BOUND</label>
			<label kind="synchronisation" x="-450" y="-100">emergency_alert!</label>
			<label kind="assignment" x="-450" y="-80">response_wait_timer = 0</label>
		</transition>
		
		<!-- Emergency response reception (RELAXED TIMING - extended bound) -->
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-350" y="-200">emergency_response?</label>
			<label kind="assignment" x="-350" y="-180">emergency_response_received = true,
pest_emergency = false,
t = 0</label>
		</transition>
		
		<!-- Emergency timeout handling (new in refined model) -->
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="-280" y="0">response_wait_timer &gt;= EMERGENCY_RESPONSE_RECEIVE_BOUND</label>
			<label kind="assignment" x="-280" y="20">pest_emergency = false</label>
		</transition>
		
		<transition>
			<source ref="id10"/>
			<target ref="id1"/>
			<label kind="assignment" x="-500" y="80">t = 0</label>
			<nail x="-500" y="50"/>
		</transition>
		
		<!-- Farm entry detection -->
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-550" y="-550">t &gt;= 4</label>
			<label kind="assignment" x="-550" y="-530">near_organic_farm = true,
farm_entry_timer = 0</label>
			<nail x="-590" y="-643"/>
		</transition>
		
		<!-- Farm entry notification (STRICT TIMING - same as abstract) -->
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="guard" x="-350" y="-680">farm_entry_timer &lt;= FARM_ENTRY_SEND_BOUND</label>
			<label kind="synchronisation" x="-350" y="-660">farm_entry_notification!</label>
		</transition>
		
		<!-- Alternative path when farm system is overloaded -->
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
			<label kind="guard" x="-450" y="-680">farm_entry_timer &lt;= FARM_ENTRY_SEND_BOUND &amp;&amp; farm_system_overloaded</label>
			<label kind="synchronisation" x="-450" y="-660">farm_entry_notification!</label>
		</transition>
		
		<!-- Extended waiting for farm acknowledgment (RELAXED RECEPTION) -->
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-500" y="-600">farm_entry_ack?</label>
			<label kind="assignment" x="-500" y="-580">farm_entry_acknowledged = true</label>
		</transition>
		
		<!-- Farm entry acknowledgment (normal path) -->
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-350" y="-600">farm_entry_ack?</label>
			<label kind="assignment" x="-350" y="-580">farm_entry_acknowledged = true</label>
		</transition>
		
		<!-- Normal farm operations -->
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-100" y="-559">t &gt;= 2 &amp;&amp; 
sprayCycles &lt; MISSION_CYCLES &amp;&amp;
power - SPRAYING_POWER_COST &gt;= LOW_POWER_THRESHOLD &amp;&amp;
farm_entry_acknowledged</label>
			<label kind="assignment" x="-167" y="-453">isSpraying = true,
sprayCycles++,
power -= SPRAYING_POWER_COST + 3,
t = 0</label>
		</transition>
		
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-300" y="-450">near_organic_farm</label>
			<label kind="assignment" x="-300" y="-430">isSpraying = false,
t = 0, x = 0</label>
			<nail x="-268" y="-455"/>
		</transition>
		
		<!-- Farm exit process -->
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-120" y="-680">sprayCycles &gt;= 3</label>
			<label kind="assignment" x="-120" y="-660">farm_exit_timer = 0</label>
		</transition>
		
		<!-- Farm exit notification (STRICT TIMING - same as abstract) -->
		<transition>
			<source ref="id9"/>
			<target ref="id1"/>
			<label kind="guard" x="50" y="-500">farm_exit_timer &lt;= FARM_EXIT_SEND_BOUND</label>
			<label kind="synchronisation" x="50" y="-480">farm_exit_notification!</label>
			<label kind="assignment" x="50" y="-460">near_organic_farm = false,
farm_entry_acknowledged = false,
t = 0</label>
			<nail x="100" y="-500"/>
			<nail x="-400" y="-500"/>
		</transition>
		
		<!-- Power management transitions -->
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-280" y="-750">power &gt;= LOW_POWER_THRESHOLD</label>
			<label kind="assignment" x="-280" y="-730">power -= CRUISING_POWER_COST,
x = 0</label>
			<nail x="-204" y="-712"/>
			<nail x="-160" y="-711"/>
		</transition>
		
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-845" y="-468">power &gt;= LOW_POWER_THRESHOLD</label>
			<label kind="assignment" x="-881" y="-518">power -= CRUISING_POWER_COST * 3,
x = 0</label>
			<nail x="-693" y="-450"/>
			<nail x="-608" y="-450"/>
		</transition>
		
		<!-- Regular spraying -->
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-547" y="-324">t &gt;= 4 &amp;&amp;
sprayCycles &lt;= MISSION_CYCLES &amp;&amp;
power - SPRAYING_POWER_COST &gt;= LOW_POWER_THRESHOLD &amp;&amp;
!near_organic_farm</label>
			<label kind="assignment" x="-545" y="-258">isSpraying = true,
sprayCycles++,
power -= SPRAYING_POWER_COST,
t = 0</label>
			<nail x="-399" y="-312"/>
		</transition>
		
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-532" y="-365">!near_organic_farm</label>
			<label kind="assignment" x="-508" y="-414">isSpraying = false,
t = 0, x = 0</label>
			<nail x="-399" y="-384"/>
		</transition>
	</template>
	
	<template>
		<name>GroundControlRefined</name>
		<declaration>clock response_timer;
clock processing_delay;
clock bureaucratic_delay; // Additional delay for refined model
clock system_overhead; // System processing overhead</declaration>
		<location id="id12" x="-400" y="-200">
			<name x="-450" y="-230">Ready</name>
		</location>
		<location id="id13" x="-200" y="-200">
			<name x="-280" y="-230">ProcessingEmergency</name>
			<label kind="invariant" x="-320" y="-180">processing_delay &lt;= GROUND_CONTROL_PROCESSING_DELAY</label>
		</location>
		<location id="id14" x="-50" y="-200">
			<name x="-100" y="-230">SendingResponse</name>
			<label kind="invariant" x="-180" y="-180">response_timer &lt;= EMERGENCY_RESPONSE_RECEIVE_BOUND</label>
		</location>
		<location id="id15" x="-200" y="-350">
			<name x="-250" y="-380">BureaucraticDelay</name>
			<label kind="invariant" x="-320" y="-330">bureaucratic_delay &lt;= 10</label>
		</location>
		<location id="id16" x="-400" y="-50">
			<name x="-450" y="-30">SystemOverloaded</name>
			<label kind="invariant" x="-520" y="-10">system_overhead &lt;= 15</label>
		</location>
		<init ref="id12"/>
		
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-350" y="-270">!ground_control_busy</label>
			<label kind="synchronisation" x="-350" y="-250">emergency_alert?</label>
			<label kind="assignment" x="-350" y="-230">processing_delay = 0</label>
		</transition>
		
		<!-- Alternative path when system is busy -->
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="-450" y="-120">ground_control_busy</label>
			<label kind="synchronisation" x="-450" y="-100">emergency_alert?</label>
			<label kind="assignment" x="-450" y="-80">system_overhead = 0</label>
		</transition>
		
		<!-- System overload handling -->
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-350" y="-100">system_overhead &gt;= 5</label>
			<label kind="assignment" x="-350" y="-80">bureaucratic_delay = 0</label>
		</transition>
		
		<!-- Bureaucratic processing delay -->
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="guard" x="-150" y="-300">bureaucratic_delay &gt;= 8</label>
			<label kind="assignment" x="-150" y="-280">processing_delay = 0</label>
		</transition>
		
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-180" y="-250">processing_delay &gt;= GROUND_CONTROL_PROCESSING_DELAY - 2</label>
			<label kind="assignment" x="-180" y="-230">response_timer = 0</label>
		</transition>
		
		<!-- Response sending (RELAXED timing bound) -->
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-150" y="-150">response_timer &lt;= EMERGENCY_RESPONSE_RECEIVE_BOUND</label>
			<label kind="synchronisation" x="-150" y="-130">emergency_response!</label>
			<nail x="-50" y="-100"/>
			<nail x="-400" y="-100"/>
		</transition>
	</template>
	
	<template>
		<name>FarmMonitoringSystemRefined</name>
		<declaration>clock entry_processing;
clock exit_processing;
clock network_buffer_delay;
clock maintenance_overhead;</declaration>
		<location id="id17" x="-300" y="-300">
			<name x="-350" y="-330">Monitoring</name>
		</location>
		<location id="id18" x="-100" y="-300">
			<name x="-150" y="-330">ProcessingEntry</name>
			<label kind="invariant" x="-250" y="-280">entry_processing &lt;= FARM_ENTRY_RECEIVE_BOUND</label>
		</location>
		<location id="id19" x="-100" y="-150">
			<name x="-150" y="-130">ProcessingExit</name>
			<label kind="invariant" x="-250" y="-130">exit_processing &lt;= FARM_EXIT_RECEIVE_BOUND</label>
		</location>
		<location id="id20" x="-300" y="-450">
			<name x="-350" y="-480">NetworkBuffering</name>
			<label kind="invariant" x="-450" y="-430">network_buffer_delay &lt;= FARM_SYSTEM_BUFFER_DELAY</label>
		</location>
		<location id="id21" x="-500" y="-300">
			<name x="-550" y="-330">MaintenanceMode</name>
			<label kind="invariant" x="-650" y="-280">maintenance_overhead &lt;= 12</label>
		</location>
		<init ref="id17"/>
		
		<!-- Normal entry processing -->
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-250" y="-350">!farm_system_overloaded</label>
			<label kind="synchronisation" x="-250" y="-330">farm_entry_notification?</label>
			<label kind="assignment" x="-250" y="-310">entry_processing = 0</label>
		</transition>
		
		<!-- Entry processing with network delay -->
		<transition>
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-280" y="-400">farm_system_overloaded</label>
			<label kind="synchronisation" x="-280" y="-380">farm_entry_notification?</label>
			<label kind="assignment" x="-280" y="-360">network_buffer_delay = 0</label>
		</transition>
		
		<!-- Network buffering delay -->
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="guard" x="-200" y="-400">network_buffer_delay &gt;= FARM_SYSTEM_BUFFER_DELAY</label>
			<label kind="assignment" x="-200" y="-380">entry_processing = 0</label>
		</transition>
		
		<!-- Maintenance mode processing -->
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-450" y="-350">farm_entry_notification?</label>
			<label kind="assignment" x="-450" y="-330">maintenance_overhead = 0</label>
		</transition>
		
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="guard" x="-350" y="-250">maintenance_overhead &gt;= 8</label>
			<label kind="assignment" x="-350" y="-230">entry_processing = 0</label>
		</transition>
		
		<!-- Entry acknowledgment (RELAXED timing) -->
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-200" y="-250">entry_processing &lt;= FARM_ENTRY_RECEIVE_BOUND</label>
			<label kind="synchronisation" x="-200" y="-230">farm_entry_ack!</label>
		</transition>
		
		<!-- Exit processing (RELAXED timing) -->
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-250" y="-200">farm_exit_notification?</label>
			<label kind="assignment" x="-250" y="-180">exit_processing = 0</label>
		</transition>
		
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-200" y="-100">exit_processing &lt;= FARM_EXIT_RECEIVE_BOUND</label>
			<label kind="synchronisation" x="-200" y="-80">farm_exit_ack!</label>
		</transition>
	</template>
	
	<system>
// System instantiation
DroneInstance = Drone();
GroundControlInstance = GroundControlRefined();
FarmSystemInstance = FarmMonitoringSystemRefined();

// System composition  
system DroneInstance, GroundControlInstance, FarmSystemInstance;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Verify refined system is deadlock-free</comment>
		</query>
		<query>
			<formula>A[] (pest_emergency imply DroneInstance.emergency_timer &lt;= EMERGENCY_ALERT_SEND_BOUND)</formula>
			<comment>Emergency alerts must still be sent within STRICT bound (same as abstract)</comment>
		</query>
		<query>
			<formula>A[] (near_organic_farm imply DroneInstance.farm_entry_timer &lt;= FARM_ENTRY_SEND_BOUND)</formula>
			<comment>Farm entry notifications must still be sent within STRICT bound (same as abstract)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (DroneInstance.response_wait_timer &gt; 30)</formula>
			<comment>Refined model allows longer waiting for emergency response (RELAXED reception)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (FarmSystemInstance.entry_processing &gt; 5)</formula>
			<comment>Refined model allows longer farm entry processing (RELAXED reception)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (emergency_response_received and sprayCycles &gt;= MISSION_CYCLES)</formula>
			<comment>Eventually drone completes mission even with delays</comment>
		</query>
	</queries>
</nta>
